import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Queue;

public class Main 
{
    static ArrayList<Integer>arr = new ArrayList();
    static int n;
    static int[][] map;
    static boolean[][] visited;

    static void BFS(int x, int y) {
        Queue<int[]> queue = new LinkedList<>();
        visited[x][y] = true;
        queue.add(new int[]{x, y});
        
        int count = 1;
        int dx[] = {-1, 1, 0, 0};   // 상하좌우
        int dy[] = {0, 0, -1, 1};   // 상하좌우

        while (!queue.isEmpty())
        {
            int po[] = queue.poll();
            int front = po[0];
            int back = po[1];

            for (int i = 0; i < 4; i++) {
                x = front + dx[i];
                y = back + dy[i];

                if (x >= 0 && x < n && y >= 0 && y < n)
                {
                    if (map[x][y] == 1 && !visited[x][y]) {
                        visited[x][y] = true;
                        queue.add(new int[]{x, y});
                        count++;
                    }
                }
            }

        }
        arr.add(count);
    }
    public static void main(String[] args) 
    {
        Scanner input = new Scanner(System.in);
        n = input.nextInt();
        input.nextLine(); // 버퍼 비우기

        map = new int[n][n];
        visited = new boolean[n][n];

        for (int i = 0; i < n; i++) {
            String str = input.nextLine();
            for (int j = 0; j < n; j++)
            {
                map[i][j] = str.charAt(j) - '0'; // 문자 → 숫자 변환
                visited[i][j] = false;
            }
        }
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++)
            {
                if (map[i][j] == 1 && visited[i][j] == false)
                    BFS(i, j);
            }
        }

        Collections.sort(arr); // 오름차순 정렬
        System.out.println(arr.size());
        for (int i = 0; i < arr.size(); i++)
            System.out.println(arr.get(i));
    }
}
