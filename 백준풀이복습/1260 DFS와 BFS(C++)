#include<iostream>
#include<queue>
using namespace std;

int graph[1001][1001] = { 0 };
bool DFSvisited[1001] = { false };
bool BFSvisited[1001] = { false };
int n, m, v;  // 정점의 개수, 간선의 개수, 탐색 시작 정점

void DFS(int v) {  // 탐색 시작 정점
	cout << v << " ";
	DFSvisited[v] = true;
	
	for (int i = 1; i <= n; i++) {
		if (graph[i][v] == 0 || DFSvisited[i] == true)
			continue;
		DFS(i);
	}
}

void BFS(int v) {  // 탐색 시작 정점
	queue<int>q;
	q.push(v);

	while (!q.empty()) {
		int a = q.front();
		cout << a << " ";
		BFSvisited[a] = true;
		q.pop();

		for (int i = 1; i <= n; i++) {
			if (graph[a][i] == 1 && BFSvisited[i] == false) {
				q.push(i);
				BFSvisited[i] = true;
			}
		}
	}
}

int main() {

	cin >> n >> m >> v;
	for (int i = 0; i < m; i++) {
		int a, b;
		cin >> a >> b;
		if (a != b)
			graph[a][b] = graph[b][a] = 1;
	}
	DFS(v);
	cout << "\n";
	BFS(v);

	return 0;
}
