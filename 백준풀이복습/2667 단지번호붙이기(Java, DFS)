import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;

public class Main 
{
    static ArrayList<Integer>arr = new ArrayList();
    static int width = 0, n;
    static int[][] map;
    static boolean[][] visited;

    static void DFS(int x, int y) {
        visited[x][y] = true;
        width++;

        int dx[] = {-1, 1, 0, 0};  // 상하좌우
        int dy[] = {0, 0, -1, 1};  // 상하좌우
        for (int i = 0; i < 4; i++) {
            int newx = x + dx[i];
            int newy = y + dy[i];
            if (newx < 0 || newx >= n || newy < 0 || newy >= n)
                continue;
            if (map[newx][newy] == 1 && visited[newx][newy] == false)
                DFS(newx, newy);
        }

    }
    public static void main(String[] args) 
    {
        Scanner input = new Scanner(System.in);
        n = input.nextInt();
        input.nextLine(); // 버퍼 비우기

        map = new int[n][n];
        visited = new boolean[n][n];

        for (int i = 0; i < n; i++) {
            String str = input.nextLine();
            for (int j = 0; j < n; j++)
            {
                map[i][j] = str.charAt(j) - '0'; // 문자 → 숫자 변환
                visited[i][j] = false;
            }
        }
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++)
            {
                if (map[i][j] == 1 && visited[i][j] == false) {
                    DFS(i, j);
                    arr.add(width);
                    width = 0;
                }
            }
        }

        Collections.sort(arr); // 오름차순 정렬
        System.out.println(arr.size());
        for (int i = 0; i < arr.size(); i++)
            System.out.println(arr.get(i));
    }
}
