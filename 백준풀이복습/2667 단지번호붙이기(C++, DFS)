#include<iostream>
#include<string>
#include<algorithm>
#include<list>
using namespace std;

int** graph, width;
bool** visited;

void DFS(int n, int x, int y) {
	visited[x][y] = true;
	width++;

	int dx[] = { -1,1,0,0 };  // 상하좌우
	int dy[] = { 0,0,-1,1 };  // 상하좌우
	for (int i = 0; i < 4; i++) {
		int mx = x + dx[i], my = y + dy[i];
		if (mx < 0 || mx >= n || my < 0 || my >= n)
			continue;
		if (graph[mx][my] == 1 && visited[mx][my] == false)
			DFS(n, mx, my);
	}
}

int main() {
	int n;
	cin >> n;
	
	graph = new int* [n];
	visited = new bool* [n];

	for (int i = 0; i < n; i++) {
		string input;  cin >> input;
		graph[i] = new int[n];
		visited[i] = new bool[n];
		for (int j = 0; j < n; j++) {
			graph[i][j] = (int)(input[j] - '0');
			visited[i][j] = false;
		}
	}
	list<int>lst;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++)
		{
			width = 0;
			if (graph[i][j] == 0 || visited[i][j] == true)
				continue;
			DFS(n, i, j);
			lst.push_back(width);
		}
	}
	lst.sort();
	cout << lst.size() << endl;
	list<int>::iterator it;

	for (it = lst.begin(); it != lst.end(); it++)
		cout << *it << endl;
	
	for (int i = 0; i < n; i++) {
		delete[] graph[i];
		delete[] visited[i];
	}
	delete[] graph;
	delete[] visited;
	return 0;
}
