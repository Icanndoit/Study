#include<iostream>
#include<vector>
#include<queue>
#include<map>
using namespace std;

int BFS(int** graph, int n, int m, bool* visit) {
	int re = 0;
	queue<int>q;
	
	for (int i = 0; i < n; i++) {
		if (visit[i] == false) {
			re++;
			visit[i] = true;
			q.push(i);

			while (!q.empty()) {
				int cur = q.front();
				q.pop();

				for (int j = 0; j < n; j++) {
					if (graph[cur][j] == 1 && visit[j] == false)
					{
						visit[j] = true;
						q.push(j);
					}
				}
			}
		}
	}
	return re;
}

int main() {
	int n, m;  // 정점의 개수, 간선의 개수
	int** graph;
	bool* visit;

	cin >> n >> m;
	graph = new int* [n];
	visit = new bool[n];

	for (int i = 0; i < n; i++) {
		graph[i] = new int[n];
		for (int j = 0; j < n; j++)
			graph[i][j] = 0;
		visit[i] = false;
	}

	for (int i = 0; i < m; i++) {
		int a, b;  cin >> a >> b;
		graph[a - 1][b - 1] = graph[b - 1][a - 1] = 1;
	}

	cout << BFS(graph, n, m, visit) << endl;

	for (int i = 0; i < n; i++)
		delete[]graph[i];
	delete[]graph;
	delete[]visit;
	return 0;
}
